#!/usr/bin/env python3
"""
Script para testar a funcionalidade de corte de √°udio (vers√£o direta)
"""

import asyncio
import os
import sys

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Import directly from modules
from utils.audio_converter import AudioConverter
from utils.file_manager import FileManager

async def test_audio_cutting_direct():
    """Testa a funcionalidade de corte de √°udio diretamente"""
    
    # Arquivo de √°udio para teste
    audio_file = r"c:\Projects\ShortTune API\temp\test_audio.mp3"
    
    print("üéµ Testando funcionalidade de corte de √°udio (importa√ß√£o direta)...")
    print(f"üìÅ Arquivo: {audio_file}")
    
    # Verifica se o arquivo existe
    if not os.path.exists(audio_file):
        print("‚ùå Arquivo de √°udio n√£o encontrado!")
        return
    
    try:
        # Cria inst√¢ncias
        audio_converter = AudioConverter()
        file_manager = FileManager()
        
        # 1. Obt√©m informa√ß√µes do √°udio
        print("\n1Ô∏è‚É£ Obtendo informa√ß√µes do √°udio...")
        audio_info = await audio_converter.get_audio_info(audio_file)
        
        if audio_info:
            print(f"   ‚úÖ Dura√ß√£o: {audio_info['duration']:.2f} segundos")
            print(f"   ‚úÖ Codec: {audio_info.get('codec', 'N/A')}")
            print(f"   ‚úÖ Sample Rate: {audio_info.get('sample_rate', 'N/A')}")
            print(f"   ‚úÖ Canais: {audio_info.get('channels', 'N/A')}")
        else:
            print("   ‚ùå N√£o foi poss√≠vel obter informa√ß√µes do √°udio")
            return
        
        # 2. Testa corte de √°udio (primeiros 5 segundos)
        print("\n2Ô∏è‚É£ Testando corte de √°udio (0-5 segundos)...")
        
        start_time = 0.0
        end_time = min(5.0, audio_info['duration'])
        
        cut_filepath = await audio_converter.cut_audio(audio_file, start_time, end_time)
        
        if cut_filepath:
            print(f"   ‚úÖ Arquivo cortado: {cut_filepath}")
            
            # Verifica se o arquivo cortado foi criado
            if os.path.exists(cut_filepath):
                print(f"   ‚úÖ Arquivo cortado criado com sucesso!")
                
                # Obt√©m tamanho do arquivo
                file_size = os.path.getsize(cut_filepath)
                print(f"   ‚úÖ Tamanho: {file_size} bytes")
                
                # Testa informa√ß√µes do arquivo cortado
                cut_info = await audio_converter.get_audio_info(cut_filepath)
                if cut_info:
                    print(f"   ‚úÖ Dura√ß√£o do arquivo cortado: {cut_info['duration']:.2f}s")
                    print(f"   ‚úÖ Codec do arquivo cortado: {cut_info.get('codec', 'N/A')}")
                
            else:
                print(f"   ‚ùå Arquivo cortado n√£o foi encontrado!")
        else:
            print("   ‚ùå Falha no corte do √°udio")
        
        # 3. Testa valida√ß√£o de tempo
        print("\n3Ô∏è‚É£ Testando valida√ß√£o de intervalos de tempo...")
        
        # Teste v√°lido
        is_valid, msg = audio_converter.validate_time_range(0, 5, audio_info['duration'])
        print(f"   ‚úÖ Intervalo 0-5s: {is_valid} ({msg})")
        
        # Teste inv√°lido
        is_valid, msg = audio_converter.validate_time_range(10, 5, audio_info['duration'])
        print(f"   ‚ùå Intervalo 10-5s: {is_valid} ({msg})")
        
        print("\nüéâ Teste de corte de √°udio conclu√≠do com sucesso!")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_audio_cutting_direct())
